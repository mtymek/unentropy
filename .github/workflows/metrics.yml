name: Metrics

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_run:
        description: "Force metrics collection even if no changes"
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  actions: read # Required to access workflow runs and artifacts
  pages: write
  id-token: write

jobs:
  build:
    name: Build Metrics
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Get full history for accurate metrics

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.2"

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build
        run: bun run build

      - name: Build GitHub Actions
        run: bun run build:actions

      - name: Download previous metrics database
        id: download-db
        run: |
          # Find the most recent successful workflow run
          echo "Searching for previous successful workflow run..."

          RUN_ID=$(gh api repos/${{ github.repository }}/actions/runs \
            --jq '.workflow_runs[] | select(.status == "completed" and .conclusion == "success" and .head_branch == "main") | .id' | head -1)

          if [ -n "$RUN_ID" ]; then
            echo "Found previous successful run: $RUN_ID"
            
            # Get the artifact ID for the database
            ARTIFACT_ID=$(gh api repos/${{ github.repository }}/runs/$RUN_ID/artifacts \
              --jq '.artifacts[] | select(.name == "unentropy-metrics") | .id')
            
            if [ -n "$ARTIFACT_ID" ]; then
              echo "Downloading database artifact: $ARTIFACT_ID"
              gh api repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID/zip \
                --output database.zip
              
              # Extract the database
              unzip -o database.zip
              rm database.zip
              
              if [ -f "unentropy-metrics.db" ]; then
                echo "Successfully downloaded previous database"
                echo "database-found=true" >> $GITHUB_OUTPUT
              else
                echo "No database file found in artifact"
                echo "database-found=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "No database artifact found in previous run"
              echo "database-found=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No previous successful run found (first run)"
            echo "database-found=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Collect metrics
        id: collect-metrics
        uses: ./.github/actions/collect-metrics
        with:
          config-path: "./unentropy.json"
          database-path: "./unentropy-metrics.db"
          database-artifact: "unentropy-metrics"
          continue-on-error: false

      - name: Create report directory
        run: mkdir -p report

      - name: Generate metrics report
        id: generate-report
        uses: ./.github/actions/generate-report
        with:
          database-path: "./unentropy-metrics.db"
          database-artifact: "unentropy-metrics"
          output-path: "./report/unentropy-report.html"
          time-range: "all"
          title: "Unentropy Project Metrics"

      - name: Save metrics database for next run
        uses: actions/upload-artifact@v4
        with:
          name: unentropy-metrics
          path: ./unentropy-metrics.db
          retention-days: 365
        if: always() && (steps.collect-metrics.outcome == 'success' || steps.download-db.outputs.database-found == 'true')

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./report/

  deploy:
    name: Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: always() && needs.build.result == 'success'

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
