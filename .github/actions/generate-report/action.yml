name: "Unentropy Generate Report"
description: "Generate HTML report from collected metrics"
author: "Unentropy Team"
branding:
  icon: "file-text"
  color: "green"

inputs:
  database-path:
    description: "Path to local database file"
    required: false
    default: "./unentropy-metrics.db"
  database-artifact:
    description: "Name of artifact containing database (fallback if database-path doesn't exist)"
    required: false
    default: "unentropy-metrics"
  output-path:
    description: "Output path for generated HTML report"
    required: false
    default: "./unentropy-report.html"
  time-range:
    description: 'Time range filter (e.g., "last-30-days", "all")'
    required: false
    default: "all"
  title:
    description: "Report title"
    required: false
    default: "Metrics Report"

outputs:
  report-path:
    description: "Path to generated HTML report"
  metrics-count:
    description: "Number of metrics included in report"
  data-points:
    description: "Total number of data points in report"
  time-range-start:
    description: "ISO 8601 timestamp of oldest data point"
  time-range-end:
    description: "ISO 8601 timestamp of newest data point"

runs:
  using: "composite"
  steps:
    - name: Download database artifact
      id: download-artifact
      run: |
        # Check if database file already exists
        if [ -f "${{ inputs.database-path }}" ]; then
          echo "Database file already exists locally"
          echo "database-found=true" >> $GITHUB_OUTPUT
        else
          # Extract directory from database path
          DB_DIR=$(dirname "${{ inputs.database-path }}")
          DB_FILE=$(basename "${{ inputs.database-path }}")
          
          # Create directory if it doesn't exist
          mkdir -p "$DB_DIR"
          
          # Find the most recent successful workflow run
          echo "Searching for database artifact..."
          
          RUN_ID=$(gh api repos/${{ github.repository }}/actions/runs \
            --jq '.workflow_runs[] | select(.status == "completed" and .conclusion == "success") | .id' | head -1)
          
          if [ -n "$RUN_ID" ]; then
            echo "Found successful run: $RUN_ID"
            
            # Get the artifact ID for the database
            ARTIFACT_ID=$(gh api repos/${{ github.repository }}/runs/$RUN_ID/artifacts \
              --jq '.artifacts[] | select(.name == "${{ inputs.database-artifact }}") | .id')
            
            if [ -n "$ARTIFACT_ID" ]; then
              echo "Downloading database artifact: $ARTIFACT_ID"
              cd "$DB_DIR"
              gh api repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID/zip \
                --output database.zip
              
              # Extract the database
              unzip -o database.zip
              rm database.zip
              
              if [ -f "$DB_FILE" ]; then
                echo "Successfully downloaded database"
                echo "database-found=true" >> $GITHUB_OUTPUT
              else
                echo "No database file found in artifact"
                echo "database-found=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "No database artifact found"
              echo "database-found=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No successful workflow run found"
            echo "database-found=false" >> $GITHUB_OUTPUT
          fi
        fi
      env:
        GITHUB_TOKEN: ${{ github.token }}
      shell: bash

    - name: Run report generation
      shell: bash
      run: node "${{ github.action_path }}/dist/report.node.js"
      env:
        INPUT_DATABASE_PATH: ${{ inputs.database-path }}
        INPUT_DATABASE_ARTIFACT: ${{ inputs.database-artifact }}
        INPUT_OUTPUT_PATH: ${{ inputs.output-path }}
        INPUT_TIME_RANGE: ${{ inputs.time-range }}
        INPUT_TITLE: ${{ inputs.title }}
